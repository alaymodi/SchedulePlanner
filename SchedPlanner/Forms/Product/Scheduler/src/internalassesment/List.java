/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package internalassesment;

import java.util.*;
import javax.swing.*;
import javax.swing.table.*;

/**
 *
 * @author 061264
 */
public class List extends javax.swing.JFrame {

    /**
     * Creates new form List
     */
    private ArrayList<Student> myStudents;                            //student list to be displayed
    private ArrayList<Student> myAllStudents;                         //reference to all students. Needed in case a student is removed or edited
    private ArrayList<Appointment> myAppointments;                    //Appointment list to be displayed
    private ArrayList<Appointment> myAllAppointments;                 //reference to all Appointment. Needed in case an appointmnet is removed or edited
    private JTable myTable;                                           //Table that displays the list of objects
    private String myListType;

    //constructor used if displaying appts
    public List(String listType, ArrayList<Student> students, ArrayList<Student> allStudents) {
        initComponents();
        myListType = listType;
        ObjectType.setText(myListType);                                 //changes Label at the top of the form to "Students
        myStudents = students;
        myAllStudents = allStudents;
        initializeList();
        Student.quickSort(myStudents, 0, students.size() - 1);
        myAppointments = null;
        myAllAppointments = null;
    }
    //constructor used if displaying students
    public List(ArrayList<Appointment> appointments, ArrayList<Appointment> allAppointments) {
        initComponents();
        myAppointments = appointments;
        myAllAppointments = allAppointments;
        myListType = "Appointments";
        ObjectType.setText("Appointments");
        initializeList();
        Appointment.quickSort(appointments, 0, appointments.size() - 1);
        myAllStudents = null;
        myStudents = null;
    }

    public void initializeList()  {
        if (myStudents != null)  addStudentsToList();
        else addApptsToList();        
    }

    public void addApptsToList() {
        Object columnLabels[] = {"Student Name", "Year", "Month", "Day", "Start time", "End Time"};
        Object rowData[][] = new Object[myAppointments.size()][columnLabels.length];     
        for (int apptNumber = myAppointments.size()-1, row = 0; row <myAppointments.size();apptNumber-- ,row++) { //begins traversing through the appointment list
                rowData[row][0] = myAppointments.get(apptNumber).getName();                     
                rowData[row][1] = (myAppointments.get(apptNumber).getYear());
                rowData[row][2] = (myAppointments.get(apptNumber).getMonth());
                rowData[row][3] = (myAppointments.get(apptNumber).getDayOfMonth());
                rowData[row][4] = (myAppointments.get(apptNumber).getStartTime());
                rowData[row][5] = (myAppointments.get(apptNumber).getEndTime());
            }   
       createTable(rowData, columnLabels);
    }

    public void addStudentsToList() {
        String rowData[][] = new String[myStudents.size()][4];
        String columnLabels[] = {"First Name", "Last Name", "Phone number", "Email address"};
        for (int row = 0; row < myStudents.size(); row++) {
            for (int col = 0; col < 4; col++) {
                rowData[row][col] = (myStudents.get(row).getStudentInfo())[col];
            }
        }        
        createTable(rowData, columnLabels);
    }

    public void createTable(Object[][] rowData, Object[] columnLabels) {
        DefaultTableModel tableModel = new DefaultTableModel(rowData, columnLabels) {
            @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false
                return false;
            }
        };  //creates a table model to hold JTable
        myTable = new JTable(tableModel);
        jScrollPane1.getViewport().add(myTable);                            //places table in a scroll pane and makes it visible 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ObjectType = new javax.swing.JLabel();
        Remove = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        edit = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ObjectType.setText("jLabel1");

        Remove.setText("Remove");
        Remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remove(evt);
            }
        });

        edit.setText("Edit");
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editData(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 813, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Remove)
                        .addGap(30, 30, 30)
                        .addComponent(edit))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ObjectType)
                        .addGap(366, 366, 366)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ObjectType)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 509, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Remove)
                    .addComponent(edit))
                .addGap(35, 35, 35))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void remove(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remove
        System.out.println("remove");
        int firstRowSelected = myTable.getSelectedRow();                           
        System.out.println(firstRowSelected);
        int lastRowSelected = myTable.getSelectedRowCount() + firstRowSelected;   //gets last row selected by gettin row count and adding to index of first row
        if (myListType.equalsIgnoreCase("Appointments")) {                        //determines if this is a list of appts or students
            removeAppts(firstRowSelected, lastRowSelected);         
        } else {
            removeStudents(firstRowSelected, lastRowSelected);
        }
        initializeList();                                                       //recreates list so removed objects are not visible
    }//GEN-LAST:event_remove

    private void editData(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editData
        int rowSelected = myTable.getSelectedRow();
        int rowCount = myTable.getSelectedRowCount();
        if(rowCount>0){
            if (myStudents != null) {
                ModifyStudent student = new ModifyStudent(myAllStudents,myStudents.get(rowSelected), "edit");    
                student.setVisible(true);
                student.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
           } 
            else {
                ModifyAppointment appt = new ModifyAppointment(myAllAppointments, myAppointments.get(rowSelected), "Edit");
                appt.setVisible(true);
                appt.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            } 
            jLabel2.setText("Please close and reopen this list to show updated changes");
            initializeList();
        }
        else jLabel2.setText("Please select a row to edit");
       
    }//GEN-LAST:event_editData

    private void removeAppts(int firstRowSelected, int lastRowSelected) {
        for (int x = lastRowSelected-1; x >= firstRowSelected; x--) {     //traverses through the appointments between the first and last row selected inclusive
            Appointment appt = myAppointments.get(x);
           // System.out.println(appt.getStartHours());
            myAppointments.remove(x);                                       //removes from display
            myAllAppointments.remove(appt);                                 //removes from whole program
            //ControlSystem.editFuturesList(appt);
        }
    }

    private void removeStudents(int firstRowSelected, int lastRowSelected) {
        for (int x = lastRowSelected - 1; x >= firstRowSelected; x--) {   //traverses through the students between the first and last row selected inclusive        
            Student stud = myStudents.get(x);                             
            myStudents.remove(x);                                         //removes student from list that is displayed
            myAllStudents.remove(stud);                                   //removes any reference to this student from the whole program
        }
    }

    /**
     * @param args the command line arguments
     */
    public void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(List.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(List.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(List.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(List.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                if (myStudents == null) {
                    new List(myAppointments, myAppointments).setVisible(true);
                } else {
                    new List(myListType, myStudents, myAllStudents).setVisible(true);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ObjectType;
    private javax.swing.JButton Remove;
    private javax.swing.JButton edit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
